{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAC,OAAMP,GAAN,mBAAqBO,OACrCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAlBoB,SAAEP,GAC1BF,EAAcE,EAAEQ,OAAOF,a,+BCPZG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEfC,EAFe,0FAE2EC,UAAWH,GAFtF,sBAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVhB,kBAchBM,GAdgB,4CAAH,sDCCTO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEnC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCHEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAExB,ECF0B,SAAEA,GAE5B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WAETxB,EAASC,GACRwB,MAAM,SAAAC,GAEHH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAId,CAACpB,IAEGqB,EDlB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAEnDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEV,qBAAKA,UAAU,YAAf,SAEEH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEMA,GADEA,EAAIC,aEdXgB,EAAS,WAEtB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEE,OACE,gCACE,wCACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAWA,GADLA,YCZpB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1b59aa32.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n  const [inputValue, setinputValue] = useState('');\r\n\r\n  const handleInputChange = ( e ) => {\r\n    setinputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories( c => [ inputValue, ...c, ] );\r\n      setinputValue('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit= { handleSubmit }>\r\n      <input \r\n        type=\"text\"\r\n        value={ inputValue }\r\n        onChange={ handleInputChange } \r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","\r\n  export const getGifs = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=hwBzbHHmNxZilyVqcJ0WXWFgGdbcaO5r&q=${ encodeURI( category ) }&limit=10`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images.downsized_medium.url\r\n      }\r\n    })\r\n\r\n  return gifs;\r\n  }","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src={ url } alt={ title } />\r\n      <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const { data:images, loading } = useFetchGifs( category ); // data:images es cambia el nombre de data a images en al desestrutcturacion para que tenga mas sentido nuestro codigo\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\r\n\r\n      {loading && <p className='animate__animated animate__flash'>Loading...</p>}\r\n\r\n        <div className='card-grid'>\r\n        {\r\n          images.map( img => ( \r\n            <GifGridItem \r\n              key={ img.id }\r\n              {...img }\r\n            />\r\n          ))\r\n        }\r\n        </div>\r\n    </>\r\n\r\n  )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect( () => { // para que solo se dispare cuando cambie la categoria\r\n\r\n    getGifs( category ) // aqui hace la peticion http\r\n    .then( imgs => { // obtenemos las imagenes en el result como imgs o cualquier nombre que quieras\r\n        // setState dispara una re-renderizacion del componente GifGrid porque es el que nos llamo y es lo damos de rreturn\r\n        setstate({ // Cambiamos la data con la recibida\r\n          data: imgs,\r\n          loading: false\r\n        });\r\n    })\r\n\r\n  }, [category])\r\n\r\n  return state; //{data:[], loading: true}\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nexport const GifApp = () => {\r\n\r\nconst [categories, setCategories] = useState(['Castlevania']);\r\n\r\n  return (\r\n    <div>\r\n      <h2>GifApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        { \r\n          categories.map( category => (\r\n            <GifGrid \r\n              key={ category }\r\n              category={ category }\r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifApp } from './components/GifApp';\n\n\nReactDOM.render(\n    <GifApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}